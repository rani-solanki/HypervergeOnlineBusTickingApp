{"ast":null,"code":"import _regeneratorRuntime from\"/home/rani/Documents/Red_bus_app/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/rani/Documents/Red_bus_app/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import setAlert from'./aleart';import{BUSNOT_FOUND,BUS_FOUND}from'./type';// Search bus\nexport var searchbus=function searchbus(_ref){var from=_ref.from,to=_ref.to,date=_ref.date;return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var config,start,End,data,body,res,errors;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:config={headers:{\"Content-Type\":\"application/json\"}};start=from.trim().split(',');End=to.trim().split(',');from={\"city\":start[0],\"state\":start[1]};to={\"city\":End[0],\"state\":End[1]};data={\"from\":{\"city\":start[0],\"state\":start[1]},\"to\":{\"city\":End[0],\"state\":End[1]},date:date};body=JSON.stringify(data);_context.prev=7;_context.next=10;return axios.post('/api/buses/searchbus',body,config);case 10:res=_context.sent;if(res.data.length===0){dispatch({type:BUSNOT_FOUND,payload:res.data});}else{dispatch({type:BUS_FOUND,payload:res.data});}console.log({payload:res.data});_context.next=20;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](7);errors=_context.t0.response.data.err;if(errors){alert(\"Not Found\");errors.forEach(function(error){return dispatch(setAlert(error.msg,'danger'));});}dispatch({type:BUSNOT_FOUND});case 20:case\"end\":return _context.stop();}}},_callee,null,[[7,15]]);}));return function(_x){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/home/rani/Documents/Red_bus_app/Frontend/src/action/SearchBuses.js"],"names":["axios","setAlert","BUSNOT_FOUND","BUS_FOUND","searchbus","from","to","date","dispatch","config","headers","start","trim","split","End","data","body","JSON","stringify","post","res","length","type","payload","console","log","errors","response","err","alert","forEach","error","msg"],"mappings":"6TAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CACA,OAASC,YAAT,CAAuBC,SAAvB,KAAwC,QAAxC,CAEA;AACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,UAAGC,CAAAA,IAAH,MAAGA,IAAH,CAASC,EAAT,MAASA,EAAT,CAAaC,IAAb,MAAaA,IAAb,iGAAwB,iBAAMC,QAAN,4JACvCC,MADuC,CAC9B,CACXC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CADE,CAD8B,CAIvCC,KAJuC,CAI/BN,IAAI,CAACO,IAAL,GAAYC,KAAZ,CAAkB,GAAlB,CAJ+B,CAKvCC,GALuC,CAKjCR,EAAE,CAACM,IAAH,GAAUC,KAAV,CAAgB,GAAhB,CALiC,CAO7CR,IAAI,CAAG,CAAE,OAAQM,KAAK,CAAC,CAAD,CAAf,CAAoB,QAASA,KAAK,CAAC,CAAD,CAAlC,CAAP,CACAL,EAAE,CAAG,CAAE,OAAQQ,GAAG,CAAC,CAAD,CAAb,CAAkB,QAASA,GAAG,CAAC,CAAD,CAA9B,CAAL,CAEMC,IAVuC,CAUhC,CACT,OAAQ,CACJ,OAAQJ,KAAK,CAAC,CAAD,CADT,CAEJ,QAASA,KAAK,CAAC,CAAD,CAFV,CADC,CAKT,KAAM,CACF,OAAQG,GAAG,CAAC,CAAD,CADT,CAEF,QAASA,GAAG,CAAC,CAAD,CAFV,CALG,CASTP,IAAI,CAAJA,IATS,CAVgC,CAqBvCS,IArBuC,CAqBhCC,IAAI,CAACC,SAAL,CAAeH,IAAf,CArBgC,wCAuBvBf,CAAAA,KAAK,CAACmB,IAAN,CAAW,sBAAX,CAAmCH,IAAnC,CAAyCP,MAAzC,CAvBuB,SAuBnCW,GAvBmC,eAwBzC,GAAIA,GAAG,CAACL,IAAJ,CAASM,MAAT,GAAoB,CAAxB,CAA2B,CACvBb,QAAQ,CAAC,CACLc,IAAI,CAAEpB,YADD,CAELqB,OAAO,CAAEH,GAAG,CAACL,IAFR,CAAD,CAAR,CAIH,CALD,IAMK,CACDP,QAAQ,CAAC,CACLc,IAAI,CAAEnB,SADD,CAELoB,OAAO,CAAEH,GAAG,CAACL,IAFR,CAAD,CAAR,CAIH,CACDS,OAAO,CAACC,GAAR,CAAY,CAAEF,OAAO,CAAEH,GAAG,CAACL,IAAf,CAAZ,EApCyC,iFAuCnCW,MAvCmC,CAuC1B,YAAIC,QAAJ,CAAaZ,IAAb,CAAkBa,GAvCQ,CAwCzC,GAAIF,MAAJ,CAAY,CACRG,KAAK,CAAC,WAAD,CAAL,CACAH,MAAM,CAACI,OAAP,CAAe,SAAAC,KAAK,QAAIvB,CAAAA,QAAQ,CAACP,QAAQ,CAAC8B,KAAK,CAACC,GAAP,CAAY,QAAZ,CAAT,CAAZ,EAApB,EACH,CACDxB,QAAQ,CAAC,CACLc,IAAI,CAAEpB,YADD,CAAD,CAAR,CA5CyC,qEAAxB,iEAAlB","sourcesContent":["import axios from 'axios';\nimport setAlert from './aleart';\nimport { BUSNOT_FOUND, BUS_FOUND } from './type';\n\n// Search bus\nexport const searchbus = ({ from, to, date }) => async dispatch => {\n    const config = {\n        headers: { \"Content-Type\": \"application/json\" }\n    }\n    const start = from.trim().split(',')\n    const End = to.trim().split(',')\n\n    from = { \"city\": start[0], \"state\": start[1] }\n    to = { \"city\": End[0], \"state\": End[1] }\n\n    const data = {\n        \"from\": {\n            \"city\": start[0],\n            \"state\": start[1]\n        },\n        \"to\": {\n            \"city\": End[0],\n            \"state\": End[1]\n        },\n        date\n    }\n    const body = JSON.stringify(data)\n    try {\n        const res = await axios.post('/api/buses/searchbus', body, config);\n        if (res.data.length === 0) {\n            dispatch({\n                type: BUSNOT_FOUND,\n                payload: res.data\n            })\n        }\n        else {\n            dispatch({\n                type: BUS_FOUND,\n                payload: res.data\n            })\n        }\n        console.log({ payload: res.data })\n        \n    } catch (err) {\n        const errors = err.response.data.err;\n        if (errors) {\n            alert(\"Not Found\")\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: BUSNOT_FOUND\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}