{"ast":null,"code":"import axios from 'axios';\nimport setAlert from './aleart';\nimport setAuthToken from '../utils/isAuthantication';\nimport { USER_LOADED, AUTH_ERROR, SET_ALERT, REMOVE_ALERT, REGISTER_FAIL, REGISTER_SUCCESS, LOGIN_SUCCESS, LOGIN_ERROR, LOGOUT } from '../action/type'; // // LOAD USER\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    console.log(\"start\");\n    const res = await axios.get('http://localhost:1900/api/auth/isAuth');\n    console.log(res);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Ragister user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://localhost:1900/api/users/signup', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    alert('user Ragister SuccesFully', 'danger'); // dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.err;\n\n    if (errors) {\n      alert(\"user is Aleardy exit\");\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Ragister user\n\nexport const adminregister = ({\n  name,\n  email,\n  password,\n  isAdmin\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    isAdmin\n  });\n\n  try {\n    const res = await axios.post('http://localhost:1900/api/admins/signup', body, config);\n    console.log(res);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.err;\n\n    if (errors) {\n      alert(\"user is Aleardy exit\");\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // login user\n\nexport const adminlogin = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://localhost:1900/api/auth/login', body);\n    console.log(\"login ksjjgurdyw\", res.data);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    }); // dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.error;\n\n    if (errors) {\n      errors.forEach(error => dispatch(alert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_ERROR\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/rani/Desktop/Red_bus_app/Frontend/my-app/src/action/auth.js"],"names":["axios","setAlert","setAuthToken","USER_LOADED","AUTH_ERROR","SET_ALERT","REMOVE_ALERT","REGISTER_FAIL","REGISTER_SUCCESS","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT","loadUser","dispatch","localStorage","token","console","log","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","alert","errors","response","forEach","error","msg","adminregister","isAdmin","adminlogin","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport setAlert from './aleart';\nimport setAuthToken from '../utils/isAuthantication';\nimport {\n    USER_LOADED,\n    AUTH_ERROR,\n    SET_ALERT,\n    REMOVE_ALERT,\n    REGISTER_FAIL,\n    REGISTER_SUCCESS,\n    LOGIN_SUCCESS,\n    LOGIN_ERROR,\n    LOGOUT\n} from '../action/type';\n\n// // LOAD USER\nexport const loadUser = () => async dispatch => {\n    if (localStorage.token) {\n        setAuthToken(localStorage.token);\n    }\n    try {\n        console.log(\"start\")\n        const res = await axios.get('http://localhost:1900/api/auth/isAuth');\n        console.log(res)\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: AUTH_ERROR\n        });\n    }\n};\n\n// Ragister user\nexport const register = ({ name, email, password }) => async dispatch =>{\n    const config = {\n        headers: { \"Content-Type\": \"application/json\" }\n    }\n    const body = JSON.stringify({ name, email, password });\n    try {\n        const res = await axios.post('http://localhost:1900/api/users/signup', body, config);\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        });\n        alert('user Ragister SuccesFully', 'danger')\n        // dispatch(loadUser());\n    } catch (err) {\n        const errors = err.response.data.err;\n        if (errors) {\n            alert(\"user is Aleardy exit\")\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: REGISTER_FAIL\n        })\n    }\n}\n\n// Ragister user\nexport const adminregister = ({ name, email, password, isAdmin }) => async dispatch => {\n    const config = {\n        headers: { \"Content-Type\": \"application/json\" }\n    }\n    const body = JSON.stringify({ name, email, password, isAdmin });\n    try {\n        const res = await axios.post('http://localhost:1900/api/admins/signup', body, config);\n        console.log(res)\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        });\n    } catch (err) {\n        const errors = err.response.data.err;\n        if (errors) {\n            alert(\"user is Aleardy exit\")\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: REGISTER_FAIL\n        })\n    }\n}\n\n\n\n// login user\nexport const adminlogin = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ email, password })\n    try {\n        const res = await axios.post('http://localhost:1900/api/auth/login', body);\n        console.log(\"login ksjjgurdyw\", res.data)\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        })\n        // dispatch(loadUser());\n    }\n    catch (err) {\n        const errors = err.response.data.error\n        if (errors) {\n            errors.forEach(error => dispatch(alert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: LOGIN_ERROR\n        })\n    }\n}\n\nexport const logout = () => dispatch => {\n    dispatch({ type: LOGOUT });\n}"]},"metadata":{},"sourceType":"module"}